#!/usr/bin/env ruby
# Tarrant Rollins <tarrant@daemonomicon.com>
require "getoptlong"

$conf = {}

# http://stackoverflow.com/questions/5661466/test-if-string-is-a-number-in-ruby-on-rails
def is_int?(value)
  return value =~ /^[0-9]+$/
end

def fatal_error(message)
  STDERR.puts message
  exit 1
end

def parse_options()
  opts = GetoptLong.new(
      ["--lock",  "-f", GetoptLong::OPTIONAL_ARGUMENT],
      ["--command", "-c", GetoptLong::OPTIONAL_ARGUMENT],
      ["--exit-code", GetoptLong::OPTIONAL_ARGUMENT]
  )

  opts.each do |arg, opt|
    case arg
    when'--lock', '-f'
      $conf[:lock] = opt
    when '--command', 'c'
      $conf[:command] = opt
    when '--exit-code'
      unless is_int? opt
        fatal_error "Invalid exit code."
      end
      $conf[:exit_code] = opt.to_i
    end
  end

  if ARGV.length >= 1 and not $conf[:lock]
    $conf[:lock] = ARGV.shift
  end
  if ARGV.length >= 1 and not $conf[:command]
    $conf[:command] = ARGV.join(' ')
  end

  unless $conf[:command]
    fatal_error "Must specifiy a command to run."
  end

  unless $conf[:lock]
    fatal_error "Must specifiy a lock file."
  end
end

def run()
  parse_options()

  begin
    File.open($conf[:lock], File::RDWR|File::CREAT, 0644) do |f|
      f.flock(File::LOCK_EX | File::LOCK_NB) or (
        exit_code = ($conf[:exit_code] or 5)
        exit exit_code
      )

      system($conf[:command])
      $conf[:exit_code] = $?.exitstatus

      f.flock(File::LOCK_UN)
    end
  rescue Errno::ENOENT
    fatal_error "Can't access lockfile directory: \"#{$conf[:lock]}\""
  rescue Errno::EACCES
    fatal_error "Incorrect permissions to modify lockfile: \"#{$conf[:lock]}\""
  rescue Errno::EISDIR
    fatal_error "Lockfile must be a file not a directory."
  end

  exit $conf[:exit_code]
end

if __FILE__ == $0
  run()
end
