#!/usr/bin/env ruby
# Copyright (c) 2012, Tarrant Rollins <tarrant@daemonomicon.com>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#     Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.  Redistributions in
#     binary form must reproduce the above copyright notice, this list of
#     conditions and the following disclaimer in the documentation and/or other
#     materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# 
require "getoptlong"

$conf = {}

# http://stackoverflow.com/questions/5661466/test-if-string-is-a-number-in-ruby-on-rails
def is_int?(value)
  return value =~ /^[0-9]+$/
end

def fatal_error(message)
  STDERR.puts message
  exit 1
end

def parse_options()
  opts = GetoptLong.new(
      ["--lock",  "-f", GetoptLong::OPTIONAL_ARGUMENT],
      ["--command", "-c", GetoptLong::OPTIONAL_ARGUMENT],
      ["--exit-code", GetoptLong::OPTIONAL_ARGUMENT]
  )

  opts.each do |arg, opt|
    case arg
    when'--lock', '-f'
      $conf[:lock] = opt
    when '--command', 'c'
      $conf[:command] = opt
    when '--exit-code'
      unless is_int? opt
        fatal_error "Invalid exit code."
      end
      $conf[:exit_code] = opt.to_i
    end
  end

  if ARGV.length >= 1 and not $conf[:lock]
    $conf[:lock] = ARGV.shift
  end
  if ARGV.length >= 1 and not $conf[:command]
    $conf[:command] = ARGV.join(' ')
  end

  unless $conf[:command]
    fatal_error "Must specifiy a command to run."
  end

  unless $conf[:lock]
    fatal_error "Must specifiy a lock file."
  end
end

def run()
  parse_options()

  begin
    File.open($conf[:lock], File::RDWR|File::CREAT, 0644) do |f|
      f.flock(File::LOCK_EX | File::LOCK_NB) or (
        exit_code = ($conf[:exit_code] or 5)
        exit exit_code
      )

      system($conf[:command])
      $conf[:exit_code] = $?.exitstatus

      f.flock(File::LOCK_UN)
    end
  rescue Errno::ENOENT
    fatal_error "Can't access lockfile directory: \"#{$conf[:lock]}\""
  rescue Errno::EACCES
    fatal_error "Incorrect permissions to modify lockfile: \"#{$conf[:lock]}\""
  rescue Errno::EISDIR
    fatal_error "Lockfile must be a file not a directory."
  end

  exit $conf[:exit_code]
end

if __FILE__ == $0
  run()
end
